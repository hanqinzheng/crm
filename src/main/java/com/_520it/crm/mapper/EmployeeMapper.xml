<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com._520it.crm.mapper.EmployeeMapper">
  <resultMap id="BaseResultMap" type="com._520it.crm.domain.Employee">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="username" property="username" />
    <result column="relname" property="relname" />
    <result column="password" property="password" />
    <result column="tel" property="tel" />
    <result column="email" property="email" />
   
    <result column="inputtime" property="inputtime" />
    <result column="state" property="state" />
    <result column="admin" property="admin" />
    <association property="dept" javaType="com._520it.crm.domain.Department" columnPrefix="d_">
    	<id column="id" property="id"/>
    	<result column="name" property="name"/>
    </association>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from employee
    where id = #{id}
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com._520it.crm.domain.Employee" useGeneratedKeys="true">
    insert into employee (username, relname,password, tel, email, dept_id, inputtime, state, admin)
    values (#{username}, #{relname}, #{password}, #{tel}, #{email}, #{dept.id}, #{inputtime}, #{state}, #{admin})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com._520it.crm.domain.Employee">
    update employee set username = #{username},relname = #{relname},
    tel = #{tel},email = #{email},dept_id = #{dept.id},inputtime = #{inputtime}
     where id = #{id}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, username, relname, password, tel, email, dept_id, inputtime, state, admin
    from employee
    where id = #{id}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, username, relname, password, tel, email, dept_id, inputtime, state, admin
    from employee
  </select>
  <select id="getEmployeeForLogin" resultMap="BaseResultMap">
  	select * from employee where username=#{username} and password=#{password}
  </select>
  <sql id="where_sql">
  	  <where>
  		<if test="keyWord!=null">
  			(e.username like concat('%',#{keyWord},'%') 
  			or e.relname like concat('%',#{keyWord},'%') 
  			or e.tel like concat('%',#{keyWord},'%')) 
  		</if>
  		<if test="dept_id!=null">
  			and dept_id = #{dept_id}
  		</if>
  		<if test="State!=null and State!='-1'">
  			and state=#{State}
  		</if>
  	</where>
  </sql>
  <select id="queryForPageCount" resultType="long">
  	select count(*) from employee e
  	<include refid="where_sql"></include>
  </select>
   <select id="queryForPage" resultMap="BaseResultMap">
   	select e.id, e.username, e.relname,e.tel, e.email, e.inputtime, e.state, e.admin,
   	d.id as d_id,d.name as d_name 
   	from employee e left join department d on(e.dept_id=d.id)
   	 <include refid="where_sql"></include>
   	 <if test="page!=null">
   	 	 limit #{start},#{rows}
   	 </if>
   </select>	
  
  <update id="updateState" parameterType="long">
  	update employee set state=0 where id=#{id}
  </update>
  
  <insert id="insertRelation">
  	insert into emp_role (eid,rid) values (#{eid},#{rid})
  </insert>
  
  <select id="role_queryByID" resultType="long">
  	select rid from emp_role where eid=#{eid}
  </select>
  
  <delete id="deleteRelation" parameterType="long">
  	delete from emp_role where eid=#{eid}
  </delete>
</mapper>